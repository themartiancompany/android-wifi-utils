#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"

# shellcheck disable=SC2034
_global_variables() {
  target_device=""
  associated_only=""
  color=""
  quiet=""
}

_requirements() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  _check_cmd \
    'iw'
  if [[ "${_os}" == "Android" ]]; then
    _check_cmd \
      'sudo' \
      'tsu'
  fi
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/$( \
    _get \
      "app" \
      "name")"
  echo \
    "${_dir}"
}

_dumpsys() {
  local \
    _cmd=()
  _cmd=(
    dumpsys
  )
  sudo \
    "${_cmd[@]}"
}

_wifi_tethering_status_get() {
  _dumpsys_parse \
    "$(_dumpsys)"
}

_dumpsys_parse() {
  local \
    _dumpsys_out="${1}"
  _status="$( \
    echo \
      "${_dumpsys_out}" | \
      sed \
        -n \
        "/^TetheredHotspot: tid=/p")"
  # _bsss=(  $( \
  #   echo \
  #     "${_bsss_lines}" | \
  #     awk \
  #       '{print $2}' | \
  #       awk \
  #         -F \
  #           "(" \
  #         '{print $1}')
  # )
  echo \
    "${_status}"
}

_iw_scan() {
  local \
    _device="${1}" \
    _cmd=()
  _cmd=(
    iw
      dev
        "${_device}"
        scan
  )
  sudo \
    "${_cmd[@]}"
}

_wifi_tethering_status() {
  _wifi_tethering_status_get
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Returns wifi tethering status

Usage:
  $(_get "app" "name")

  options:
     -h                   This message.
     -c                   Enable color output
     -v                   Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flags=(
      "${1}"
    ) \
    _flag
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  local \
    _call_date
  TZ=UTC \
  printf \
    -v \
      _call_date \
    '%(%FT%R%z)T' \
    "${SOURCE_DATE_EPOCH}"
  _msg_info "${app_name} configuration"
  _msg_info "                Call date:   $(_get "_call" "date")"
}

_globals
_global_variables
_requirements
_config_user_init \
  "$(_get \
       "app" \
       "name")"
# shellcheck disable=SC2034
while \
  getopts \
    'cvh?' \
    arg; do
  case \
    "${arg}" in
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
_set_overrides
_config_user_init \
  "$( \
    _get \
      "app" \
      "name")"
_show_config
app_opts=(
)
_wifi_tethering_status \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
